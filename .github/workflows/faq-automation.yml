name: FAQ Automation

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process-faq-proposal:
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'faq-proposal')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv pip install --system -e .

      - name: Extract issue fields
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            // Get issue number from event or manual input
            const issueNumber = context.payload.issue?.number || ${{ inputs.issue_number || 'null' }};

            // Fetch issue if manually triggered
            const issue = context.payload.issue || await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            }).then(res => res.data);

            const body = issue.body || '';

            // Parse the structured issue body
            const lines = body.split('\n');
            let question = '';
            let answer = '';
            let course = 'machine-learning-zoomcamp';  // default
            let currentSection = null;

            for (let i = 0; i < lines.length; i++) {
              const line = lines[i].trim();

              // Look for course field
              if (line.includes('### Course')) {
                // Next non-empty line has the course
                for (let j = i + 1; j < lines.length; j++) {
                  const courseLine = lines[j].trim();
                  if (courseLine && !courseLine.startsWith('#')) {
                    course = courseLine;
                    break;
                  }
                }
              }

              // Look for question field
              if (line.includes('### Question')) {
                currentSection = 'question';
                question = '';
                continue;
              }

              // Look for answer field
              if (line.includes('### Answer')) {
                currentSection = 'answer';
                answer = '';
                continue;
              }

              // Look for checklist (stop collecting)
              if (line.includes('### Checklist')) {
                currentSection = null;
                continue;
              }

              // Collect content
              if (currentSection === 'question' && line && !line.startsWith('#')) {
                question += (question ? '\n' : '') + line;
              } else if (currentSection === 'answer' && line && !line.startsWith('#')) {
                answer += (answer ? '\n' : '') + line;
              }
            }

            core.setOutput('course', course);
            core.setOutput('question', question.trim());
            core.setOutput('answer', answer.trim());

            console.log('Extracted course:', course);
            console.log('Extracted question:', question.substring(0, 100));
            console.log('Extracted answer:', answer.substring(0, 100));

      - name: Process FAQ with AI
        id: process
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Create issue body file for CLI
          cat > /tmp/issue_body.txt << 'EOF'
          ### Question
          ${{ steps.extract.outputs.question }}

          ### Answer
          ${{ steps.extract.outputs.answer }}
          EOF

          # Run FAQ automation CLI
          python -m faq_automation.cli \
            --issue-body "$(cat /tmp/issue_body.txt)" \
            --issue-number ${{ github.event.issue.number }} \
            --course "${{ steps.extract.outputs.course }}" \
            --model "gpt-5-nano" \
            --output-dir /tmp

          # Read the output
          if [ -f /tmp/faq_decision.json ]; then
            echo "decision=$(cat /tmp/faq_decision.json | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "Error: FAQ decision file not found"
            exit 1
          fi

      - name: Handle NEW or UPDATE action
        if: fromJson(steps.process.outputs.decision).action != 'DUPLICATE'
        uses: actions/github-script@v7
        with:
          script: |
            const decision = ${{ steps.process.outputs.decision }};
            const action = decision.action;
            const issueNumber = decision.issue_number;
            const prBody = decision.pr_body;
            const filePath = decision.file_path;

            // Create branch name
            const branchName = `faq-bot/issue-${issueNumber}`;

            // Configure git
            await exec.exec('git', ['config', 'user.name', 'FAQ Bot']);
            await exec.exec('git', ['config', 'user.email', 'faq-bot@datatalks.club']);

            // Create and switch to new branch
            await exec.exec('git', ['checkout', '-b', branchName]);

            // Add modified files
            await exec.exec('git', ['add', filePath]);

            // Commit changes
            const commitMsg = `${action}: ${decision.decision.question.substring(0, 72)}`;
            await exec.exec('git', ['commit', '-m', commitMsg]);

            // Push branch
            await exec.exec('git', ['push', 'origin', branchName]);

            // Create pull request
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[FAQ Bot] ${action}: ${decision.decision.question.substring(0, 72)}`,
              head: branchName,
              base: 'main',
              body: prBody
            });

            // Comment on issue with PR link
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ FAQ ${action} proposal created in PR #${pr.number}\n\nPlease review and approve the changes.`
            });

      - name: Handle DUPLICATE action
        if: fromJson(steps.process.outputs.decision).action == 'DUPLICATE'
        uses: actions/github-script@v7
        with:
          script: |
            const decision = ${{ steps.process.outputs.decision }};
            const comment = decision.comment;
            const issueNumber = decision.issue_number;

            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

            // Close issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: 'closed',
              state_reason: 'completed'
            });

      - name: Handle errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue?.number || ${{ inputs.issue_number || 'null' }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `❌ FAQ Bot encountered an error processing this proposal.\n\nPlease check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.\n\nA maintainer will review this manually.`
            });
